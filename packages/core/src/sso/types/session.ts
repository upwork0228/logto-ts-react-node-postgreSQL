import { z } from 'zod';

import { extendedSocialUserInfoGuard } from './saml.js';

/**
 * Single sign on connector session
 *
 * @property state The state generated by Logto experience client.
 * @property redirectUri The redirect uri for the identity provider.
 * @property nonce OIDC only properties, generated by OIDC connector factory, used to verify the identity provider response.
 * @property userInfo The user info returned by the identity provider.
 *  SAML only properties, parsed from the SAML assertion.
 *  We store the assertion in the session storage after receiving it from the identity provider.
 *  So the client authentication handler can get it later.
 * @property connectorId The connector id.
 *
 * @remark this is a forked version of @logto/connector-kit
 * Simplified the type definition to only include the properties we need.
 * Create additional type guard to validate the session data.
 * @see @logto/connector-kit/types/social.ts
 */
export const singleSignOnConnectorSessionGuard = z.object({
  state: z.string(),
  redirectUri: z.string(),
  connectorId: z.string(),
  nonce: z.string().optional(),
  userInfo: extendedSocialUserInfoGuard.optional(),
});

export type SingleSignOnConnectorSession = z.infer<typeof singleSignOnConnectorSessionGuard>;

export type CreateSingleSignOnSession = (storage: SingleSignOnConnectorSession) => Promise<void>;

/**
 * Single sign on interaction identifier session
 *
 * @remark this session is used to store the authentication result from the identity provider. {@link /packages/core/src/routes/interaction/utils/single-sign-on.ts}
 * This session is needed because we need to split the authentication process into sign in and sign up two parts.
 * If the SSO identity is found in DB we will directly sign in the user.
 * If the SSO identity is not found in DB we will throw an error and let the client to create a new user.
 * In the SSO registration endpoint, we will validate this session data and create a new user accordingly.
 */
export const singleSignOnInteractionIdentifierResultGuard = z.object({
  singleSignOnIdentifier: z.object({
    connectorId: z.string(),
    issuer: z.string(),
    userInfo: extendedSocialUserInfoGuard,
  }),
});

export type SingleSignOnInteractionIdentifierResult = z.infer<
  typeof singleSignOnInteractionIdentifierResultGuard
>;
